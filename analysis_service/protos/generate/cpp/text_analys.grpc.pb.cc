// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: text_analys.proto

#include "text_analys.pb.h"
#include "text_analys.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Text_analys {

static const char* TextAnalysService_method_names[] = {
  "/Text_analys.TextAnalysService/getResult",
};

std::unique_ptr< TextAnalysService::Stub> TextAnalysService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TextAnalysService::Stub> stub(new TextAnalysService::Stub(channel));
  return stub;
}

TextAnalysService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getResult_(TextAnalysService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TextAnalysService::Stub::getResult(::grpc::ClientContext* context, const ::Text_analys::SettingsTextPB& request, ::Text_analys::ResultParsingPB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getResult_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Text_analys::ResultParsingPB>* TextAnalysService::Stub::AsyncgetResultRaw(::grpc::ClientContext* context, const ::Text_analys::SettingsTextPB& request, ::grpc::CompletionQueue* cq) {
  return nullptr;//new ::grpc::ClientAsyncResponseReader< ::Text_analys::ResultParsingPB>(channel_.get(), cq, rpcmethod_getResult_, context, request);
}

TextAnalysService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextAnalysService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextAnalysService::Service, ::Text_analys::SettingsTextPB, ::Text_analys::ResultParsingPB>(
          std::mem_fn(&TextAnalysService::Service::getResult), this)));
}

TextAnalysService::Service::~Service() {
}

::grpc::Status TextAnalysService::Service::getResult(::grpc::ServerContext* context, const ::Text_analys::SettingsTextPB* request, ::Text_analys::ResultParsingPB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Text_analys


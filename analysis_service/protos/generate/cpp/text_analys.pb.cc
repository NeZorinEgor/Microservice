// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text_analys.proto

#include "text_analys.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace Text_analys {
template <typename>
PROTOBUF_CONSTEXPR SettingsTextPB::SettingsTextPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingsTextPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsTextPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsTextPBDefaultTypeInternal() {}
  union {
    SettingsTextPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsTextPBDefaultTypeInternal _SettingsTextPB_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResultParsingPB::ResultParsingPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.water_value_)*/ 0

  , /*decltype(_impl_.mood_)*/ 0

  , /*decltype(_impl_.hard_reading_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultParsingPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultParsingPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultParsingPBDefaultTypeInternal() {}
  union {
    ResultParsingPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultParsingPBDefaultTypeInternal _ResultParsingPB_default_instance_;
}  // namespace Text_analys
static ::_pb::Metadata file_level_metadata_text_5fanalys_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_text_5fanalys_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_text_5fanalys_2eproto = nullptr;
const ::uint32_t TableStruct_text_5fanalys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Text_analys::SettingsTextPB, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Text_analys::SettingsTextPB, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Text_analys::ResultParsingPB, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Text_analys::ResultParsingPB, _impl_.water_value_),
    PROTOBUF_FIELD_OFFSET(::Text_analys::ResultParsingPB, _impl_.mood_),
    PROTOBUF_FIELD_OFFSET(::Text_analys::ResultParsingPB, _impl_.hard_reading_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Text_analys::SettingsTextPB)},
        { 9, -1, -1, sizeof(::Text_analys::ResultParsingPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Text_analys::_SettingsTextPB_default_instance_._instance,
    &::Text_analys::_ResultParsingPB_default_instance_._instance,
};
const char descriptor_table_protodef_text_5fanalys_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021text_analys.proto\022\013Text_analys\"\036\n\016Sett"
    "ingsTextPB\022\014\n\004text\030\001 \001(\t\"\257\001\n\017ResultParsi"
    "ngPB\022\023\n\013water_value\030\001 \001(\005\022/\n\004mood\030\002 \001(\0162"
    "!.Text_analys.ResultParsingPB.Mood\022\024\n\014ha"
    "rd_reading\030\003 \001(\005\"@\n\004Mood\022\007\n\003sad\020\000\022\t\n\005hap"
    "py\020\001\022\n\n\006lovely\020\002\022\014\n\010terrible\020\003\022\n\n\006boring"
    "\020\0042]\n\021TextAnalysService\022H\n\tgetResult\022\033.T"
    "ext_analys.SettingsTextPB\032\034.Text_analys."
    "ResultParsingPB\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_text_5fanalys_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_text_5fanalys_2eproto = {
    false,
    false,
    345,
    descriptor_table_protodef_text_5fanalys_2eproto,
    "text_analys.proto",
    &descriptor_table_text_5fanalys_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_text_5fanalys_2eproto::offsets,
    file_level_metadata_text_5fanalys_2eproto,
    file_level_enum_descriptors_text_5fanalys_2eproto,
    file_level_service_descriptors_text_5fanalys_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_text_5fanalys_2eproto_getter() {
  return &descriptor_table_text_5fanalys_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_text_5fanalys_2eproto(&descriptor_table_text_5fanalys_2eproto);
namespace Text_analys {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultParsingPB_Mood_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_text_5fanalys_2eproto);
  return file_level_enum_descriptors_text_5fanalys_2eproto[0];
}
bool ResultParsingPB_Mood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ResultParsingPB_Mood ResultParsingPB::sad;
constexpr ResultParsingPB_Mood ResultParsingPB::happy;
constexpr ResultParsingPB_Mood ResultParsingPB::lovely;
constexpr ResultParsingPB_Mood ResultParsingPB::terrible;
constexpr ResultParsingPB_Mood ResultParsingPB::boring;
constexpr ResultParsingPB_Mood ResultParsingPB::Mood_MIN;
constexpr ResultParsingPB_Mood ResultParsingPB::Mood_MAX;
constexpr int ResultParsingPB::Mood_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SettingsTextPB::_Internal {
 public:
};

SettingsTextPB::SettingsTextPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Text_analys.SettingsTextPB)
}
SettingsTextPB::SettingsTextPB(const SettingsTextPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsTextPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Text_analys.SettingsTextPB)
}

inline void SettingsTextPB::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.text_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingsTextPB::~SettingsTextPB() {
  // @@protoc_insertion_point(destructor:Text_analys.SettingsTextPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsTextPB::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void SettingsTextPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsTextPB::Clear() {
// @@protoc_insertion_point(message_clear_start:Text_analys.SettingsTextPB)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsTextPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Text_analys.SettingsTextPB.text"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SettingsTextPB::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Text_analys.SettingsTextPB)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Text_analys.SettingsTextPB.text");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Text_analys.SettingsTextPB)
  return target;
}

::size_t SettingsTextPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Text_analys.SettingsTextPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsTextPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsTextPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsTextPB::GetClassData() const { return &_class_data_; }


void SettingsTextPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsTextPB*>(&to_msg);
  auto& from = static_cast<const SettingsTextPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Text_analys.SettingsTextPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsTextPB::CopyFrom(const SettingsTextPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Text_analys.SettingsTextPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsTextPB::IsInitialized() const {
  return true;
}

void SettingsTextPB::InternalSwap(SettingsTextPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsTextPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_text_5fanalys_2eproto_getter, &descriptor_table_text_5fanalys_2eproto_once,
      file_level_metadata_text_5fanalys_2eproto[0]);
}
// ===================================================================

class ResultParsingPB::_Internal {
 public:
};

ResultParsingPB::ResultParsingPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Text_analys.ResultParsingPB)
}
ResultParsingPB::ResultParsingPB(const ResultParsingPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Text_analys.ResultParsingPB)
}

inline void ResultParsingPB::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.water_value_) { 0 }

    , decltype(_impl_.mood_) { 0 }

    , decltype(_impl_.hard_reading_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResultParsingPB::~ResultParsingPB() {
  // @@protoc_insertion_point(destructor:Text_analys.ResultParsingPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultParsingPB::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResultParsingPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultParsingPB::Clear() {
// @@protoc_insertion_point(message_clear_start:Text_analys.ResultParsingPB)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.water_value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.hard_reading_) -
      reinterpret_cast<char*>(&_impl_.water_value_)) + sizeof(_impl_.hard_reading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultParsingPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 water_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.water_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Text_analys.ResultParsingPB.Mood mood = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mood(static_cast<::Text_analys::ResultParsingPB_Mood>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 hard_reading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.hard_reading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResultParsingPB::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Text_analys.ResultParsingPB)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 water_value = 1;
  if (this->_internal_water_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_water_value(), target);
  }

  // .Text_analys.ResultParsingPB.Mood mood = 2;
  if (this->_internal_mood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_mood(), target);
  }

  // int32 hard_reading = 3;
  if (this->_internal_hard_reading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_hard_reading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Text_analys.ResultParsingPB)
  return target;
}

::size_t ResultParsingPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Text_analys.ResultParsingPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 water_value = 1;
  if (this->_internal_water_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_water_value());
  }

  // .Text_analys.ResultParsingPB.Mood mood = 2;
  if (this->_internal_mood() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mood());
  }

  // int32 hard_reading = 3;
  if (this->_internal_hard_reading() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hard_reading());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultParsingPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultParsingPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultParsingPB::GetClassData() const { return &_class_data_; }


void ResultParsingPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultParsingPB*>(&to_msg);
  auto& from = static_cast<const ResultParsingPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Text_analys.ResultParsingPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_water_value() != 0) {
    _this->_internal_set_water_value(from._internal_water_value());
  }
  if (from._internal_mood() != 0) {
    _this->_internal_set_mood(from._internal_mood());
  }
  if (from._internal_hard_reading() != 0) {
    _this->_internal_set_hard_reading(from._internal_hard_reading());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultParsingPB::CopyFrom(const ResultParsingPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Text_analys.ResultParsingPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultParsingPB::IsInitialized() const {
  return true;
}

void ResultParsingPB::InternalSwap(ResultParsingPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResultParsingPB, _impl_.hard_reading_)
      + sizeof(ResultParsingPB::_impl_.hard_reading_)
      - PROTOBUF_FIELD_OFFSET(ResultParsingPB, _impl_.water_value_)>(
          reinterpret_cast<char*>(&_impl_.water_value_),
          reinterpret_cast<char*>(&other->_impl_.water_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultParsingPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_text_5fanalys_2eproto_getter, &descriptor_table_text_5fanalys_2eproto_once,
      file_level_metadata_text_5fanalys_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Text_analys
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Text_analys::SettingsTextPB*
Arena::CreateMaybeMessage< ::Text_analys::SettingsTextPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Text_analys::SettingsTextPB >(arena);
}
template<> PROTOBUF_NOINLINE ::Text_analys::ResultParsingPB*
Arena::CreateMaybeMessage< ::Text_analys::ResultParsingPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Text_analys::ResultParsingPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

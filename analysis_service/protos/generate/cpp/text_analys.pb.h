// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text_analys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_text_5fanalys_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_text_5fanalys_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_text_5fanalys_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_text_5fanalys_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_text_5fanalys_2eproto;
namespace Text_analys {
class ResultParsingPB;
struct ResultParsingPBDefaultTypeInternal;
extern ResultParsingPBDefaultTypeInternal _ResultParsingPB_default_instance_;
class SettingsTextPB;
struct SettingsTextPBDefaultTypeInternal;
extern SettingsTextPBDefaultTypeInternal _SettingsTextPB_default_instance_;
}  // namespace Text_analys
PROTOBUF_NAMESPACE_OPEN
template <>
::Text_analys::ResultParsingPB* Arena::CreateMaybeMessage<::Text_analys::ResultParsingPB>(Arena*);
template <>
::Text_analys::SettingsTextPB* Arena::CreateMaybeMessage<::Text_analys::SettingsTextPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace Text_analys {
enum ResultParsingPB_Mood : int {
  ResultParsingPB_Mood_sad = 0,
  ResultParsingPB_Mood_happy = 1,
  ResultParsingPB_Mood_lovely = 2,
  ResultParsingPB_Mood_terrible = 3,
  ResultParsingPB_Mood_boring = 4,
  ResultParsingPB_Mood_ResultParsingPB_Mood_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResultParsingPB_Mood_ResultParsingPB_Mood_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResultParsingPB_Mood_IsValid(int value);
constexpr ResultParsingPB_Mood ResultParsingPB_Mood_Mood_MIN = static_cast<ResultParsingPB_Mood>(0);
constexpr ResultParsingPB_Mood ResultParsingPB_Mood_Mood_MAX = static_cast<ResultParsingPB_Mood>(4);
constexpr int ResultParsingPB_Mood_Mood_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ResultParsingPB_Mood_descriptor();
template <typename T>
const std::string& ResultParsingPB_Mood_Name(T value) {
  static_assert(std::is_same<T, ResultParsingPB_Mood>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Mood_Name().");
  return ResultParsingPB_Mood_Name(static_cast<ResultParsingPB_Mood>(value));
}
template <>
inline const std::string& ResultParsingPB_Mood_Name(ResultParsingPB_Mood value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ResultParsingPB_Mood_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ResultParsingPB_Mood_Parse(absl::string_view name, ResultParsingPB_Mood* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultParsingPB_Mood>(
      ResultParsingPB_Mood_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SettingsTextPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Text_analys.SettingsTextPB) */ {
 public:
  inline SettingsTextPB() : SettingsTextPB(nullptr) {}
  ~SettingsTextPB() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SettingsTextPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SettingsTextPB(const SettingsTextPB& from);
  SettingsTextPB(SettingsTextPB&& from) noexcept
    : SettingsTextPB() {
    *this = ::std::move(from);
  }

  inline SettingsTextPB& operator=(const SettingsTextPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsTextPB& operator=(SettingsTextPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SettingsTextPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const SettingsTextPB* internal_default_instance() {
    return reinterpret_cast<const SettingsTextPB*>(
               &_SettingsTextPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SettingsTextPB& a, SettingsTextPB& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsTextPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettingsTextPB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SettingsTextPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SettingsTextPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SettingsTextPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SettingsTextPB& from) {
    SettingsTextPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsTextPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Text_analys.SettingsTextPB";
  }
  protected:
  explicit SettingsTextPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:Text_analys.SettingsTextPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_text_5fanalys_2eproto;
};// -------------------------------------------------------------------

class ResultParsingPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Text_analys.ResultParsingPB) */ {
 public:
  inline ResultParsingPB() : ResultParsingPB(nullptr) {}
  ~ResultParsingPB() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResultParsingPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultParsingPB(const ResultParsingPB& from);
  ResultParsingPB(ResultParsingPB&& from) noexcept
    : ResultParsingPB() {
    *this = ::std::move(from);
  }

  inline ResultParsingPB& operator=(const ResultParsingPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultParsingPB& operator=(ResultParsingPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultParsingPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultParsingPB* internal_default_instance() {
    return reinterpret_cast<const ResultParsingPB*>(
               &_ResultParsingPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultParsingPB& a, ResultParsingPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultParsingPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultParsingPB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultParsingPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultParsingPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultParsingPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultParsingPB& from) {
    ResultParsingPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultParsingPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Text_analys.ResultParsingPB";
  }
  protected:
  explicit ResultParsingPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Mood = ResultParsingPB_Mood;
  static constexpr Mood sad = ResultParsingPB_Mood_sad;
  static constexpr Mood happy = ResultParsingPB_Mood_happy;
  static constexpr Mood lovely = ResultParsingPB_Mood_lovely;
  static constexpr Mood terrible = ResultParsingPB_Mood_terrible;
  static constexpr Mood boring = ResultParsingPB_Mood_boring;
  static inline bool Mood_IsValid(int value) {
    return ResultParsingPB_Mood_IsValid(value);
  }
  static constexpr Mood Mood_MIN = ResultParsingPB_Mood_Mood_MIN;
  static constexpr Mood Mood_MAX = ResultParsingPB_Mood_Mood_MAX;
  static constexpr int Mood_ARRAYSIZE = ResultParsingPB_Mood_Mood_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mood_descriptor() {
    return ResultParsingPB_Mood_descriptor();
  }
  template <typename T>
  static inline const std::string& Mood_Name(T value) {
    return ResultParsingPB_Mood_Name(value);
  }
  static inline bool Mood_Parse(absl::string_view name, Mood* value) {
    return ResultParsingPB_Mood_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWaterValueFieldNumber = 1,
    kMoodFieldNumber = 2,
    kHardReadingFieldNumber = 3,
  };
  // int32 water_value = 1;
  void clear_water_value() ;
  ::int32_t water_value() const;
  void set_water_value(::int32_t value);

  private:
  ::int32_t _internal_water_value() const;
  void _internal_set_water_value(::int32_t value);

  public:
  // .Text_analys.ResultParsingPB.Mood mood = 2;
  void clear_mood() ;
  ::Text_analys::ResultParsingPB_Mood mood() const;
  void set_mood(::Text_analys::ResultParsingPB_Mood value);

  private:
  ::Text_analys::ResultParsingPB_Mood _internal_mood() const;
  void _internal_set_mood(::Text_analys::ResultParsingPB_Mood value);

  public:
  // int32 hard_reading = 3;
  void clear_hard_reading() ;
  ::int32_t hard_reading() const;
  void set_hard_reading(::int32_t value);

  private:
  ::int32_t _internal_hard_reading() const;
  void _internal_set_hard_reading(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Text_analys.ResultParsingPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t water_value_;
    int mood_;
    ::int32_t hard_reading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_text_5fanalys_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SettingsTextPB

// string text = 1;
inline void SettingsTextPB::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& SettingsTextPB::text() const {
  // @@protoc_insertion_point(field_get:Text_analys.SettingsTextPB.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SettingsTextPB::set_text(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Text_analys.SettingsTextPB.text)
}
inline std::string* SettingsTextPB::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Text_analys.SettingsTextPB.text)
  return _s;
}
inline const std::string& SettingsTextPB::_internal_text() const {
  return _impl_.text_.Get();
}
inline void SettingsTextPB::_internal_set_text(const std::string& value) {
  ;


  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsTextPB::_internal_mutable_text() {
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* SettingsTextPB::release_text() {
  // @@protoc_insertion_point(field_release:Text_analys.SettingsTextPB.text)
  return _impl_.text_.Release();
}
inline void SettingsTextPB::set_allocated_text(std::string* value) {
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Text_analys.SettingsTextPB.text)
}

// -------------------------------------------------------------------

// ResultParsingPB

// int32 water_value = 1;
inline void ResultParsingPB::clear_water_value() {
  _impl_.water_value_ = 0;
}
inline ::int32_t ResultParsingPB::water_value() const {
  // @@protoc_insertion_point(field_get:Text_analys.ResultParsingPB.water_value)
  return _internal_water_value();
}
inline void ResultParsingPB::set_water_value(::int32_t value) {
  _internal_set_water_value(value);
  // @@protoc_insertion_point(field_set:Text_analys.ResultParsingPB.water_value)
}
inline ::int32_t ResultParsingPB::_internal_water_value() const {
  return _impl_.water_value_;
}
inline void ResultParsingPB::_internal_set_water_value(::int32_t value) {
  ;
  _impl_.water_value_ = value;
}

// .Text_analys.ResultParsingPB.Mood mood = 2;
inline void ResultParsingPB::clear_mood() {
  _impl_.mood_ = 0;
}
inline ::Text_analys::ResultParsingPB_Mood ResultParsingPB::mood() const {
  // @@protoc_insertion_point(field_get:Text_analys.ResultParsingPB.mood)
  return _internal_mood();
}
inline void ResultParsingPB::set_mood(::Text_analys::ResultParsingPB_Mood value) {
   _internal_set_mood(value);
  // @@protoc_insertion_point(field_set:Text_analys.ResultParsingPB.mood)
}
inline ::Text_analys::ResultParsingPB_Mood ResultParsingPB::_internal_mood() const {
  return static_cast<::Text_analys::ResultParsingPB_Mood>(_impl_.mood_);
}
inline void ResultParsingPB::_internal_set_mood(::Text_analys::ResultParsingPB_Mood value) {
  ;
  _impl_.mood_ = value;
}

// int32 hard_reading = 3;
inline void ResultParsingPB::clear_hard_reading() {
  _impl_.hard_reading_ = 0;
}
inline ::int32_t ResultParsingPB::hard_reading() const {
  // @@protoc_insertion_point(field_get:Text_analys.ResultParsingPB.hard_reading)
  return _internal_hard_reading();
}
inline void ResultParsingPB::set_hard_reading(::int32_t value) {
  _internal_set_hard_reading(value);
  // @@protoc_insertion_point(field_set:Text_analys.ResultParsingPB.hard_reading)
}
inline ::int32_t ResultParsingPB::_internal_hard_reading() const {
  return _impl_.hard_reading_;
}
inline void ResultParsingPB::_internal_set_hard_reading(::int32_t value) {
  ;
  _impl_.hard_reading_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Text_analys


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::Text_analys::ResultParsingPB_Mood> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Text_analys::ResultParsingPB_Mood>() {
  return ::Text_analys::ResultParsingPB_Mood_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_text_5fanalys_2eproto_2epb_2eh
